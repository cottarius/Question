INSERT INTO questions (question, answer, theme, is_impotent)
VALUES ('Что представляют собой дженерики в Java?', 'Дженерики – это параметризованные типы.\n\n
С их помощью можно объявлять классы, интерфейсы и методы, в которых тип данных указан в виде параметра.\n\n
Используя дженерики, можно создать единственный класс, который будет автоматически работать с разными типами данных.\n\n
Эта информация доступна только на этапе компиляции и стирается в runtime, и в байт код попадет только информация о том, что в программе есть некий список List<Object> list вместо List<String> list, например.\n\n
Появились в версии 1.5 ', 'CORE2_COLLECTIONS', false),
       ('Какова цель использования дженериков?', 'Для строгой типизации и проверки на этапе компиляции.\n\n
Дженерики позволяют передавать тип объекта компилятору в форме <тип>. Таким образом, компилятор может выполнить все необходимые действия по проверке типов во время компиляции, обеспечивая безопасность по приведению типов во время выполнения.', 'CORE2_COLLECTIONS', false),
       ('Что такое сырые типы (raw type)?', 'Сырые типы — это типы без указания типа в фигурных скобках ( List list = new ArrayList<>() ), они использовались до появления дженериков.\n
Не указывая их, под капотом используется Object. ', 'CORE2_COLLECTIONS', false),
       ('Что такое стирание типов?', 'Стирание типов в Java - это процесс удаления информации о типах во время компиляции, позволяющий байт-коду выполняться на разных платформах с различными типами данных. Оно повышает переносимость, улучшает производительность и поддерживает обобщения.
', 'CORE2_COLLECTIONS', false),
       ('Как работают вайлдкарды в контексте дженериков?', 'Маске (wildcard) можно задать ограничения (Преодолеть инвариантность дженериков):\n\n
-“? extends T” (для получения в методе)  - объект, который наследуется от Т, либо сам Т – ковариантность.\n
Если контейнер объявлен ? extends T, то можно только читать значения. В список нельзя ничего добавить, кроме null.\n\n
-“? super T” (для отдачи в методе) - любой объект подтипа Т, включая Т – контравариантность.\n Нельзя прочитать элемент из контейнера с wildcard ? super, кроме объекта класса Object\n\n
При использовании ? мы сообщаем компилятору, чтобы он игнорировал информацию о типе, т.е. <?> - неограниченный символ подстановки. <?> означает то же что и <? extends Object>, т.е. принимает всё. Это можно обойти, создав обобщенный метод, объявленный с переменной типа T.', 'CORE2_COLLECTIONS', false),
       ('Объясните принцип PECS в контексте дженериков.', 'Producer Extends Consumer Super\n\n
wildcard подстановочный знак:\n
 Если мы объявили wildcard с extends, то это producer. Он только «производит», предоставляет элемент из контейнера, а сам ничего не принимает.\n\n
 Если же мы объявили wildcard с super — то это consumer. Он только принимает, а предоставить ничего не может.\n\n
Иначе говоря:\n
Если вы только получаете объекты из дженерик-коллекции - это producer и надо использвовать extends.\n
Если вы только кладете объекты в коллекцию - это consumer и надо использовать super.\n
Если вы делаете оба эти действия, то не надо использовать ни super, ни extends.', 'CORE2_COLLECTIONS', false),
       ('Что означает термин "коллекция" в Java?', 'Коллекция – это объект, который содержит набор объектов одного типа. Каждый из этих объектов в коллекции называется элементом.', 'CORE2_COLLECTIONS', false),
       ('Расскажите про иерархию коллекций в Java.', '', 'CORE2_COLLECTIONS', true),
       ('Почему Map не является подтипом Collection, в отличие от List и Set?', '', 'CORE2_COLLECTIONS', true),
       ('Какие различия между java.util.Collection и java.util.Collections?', '', 'CORE2_COLLECTIONS', false),
       ('Как отличается итератор с fail-fast итератора с fail-safe поведением? Приведите примеры.', '', 'CORE2_COLLECTIONS', false),
       ('В чем разница между Enumeration и Iterator?', '', 'CORE2_COLLECTIONS', false),
       ('Как связаны между собой интерфейсы Iterable, Iterator и "for-each"?', '', 'CORE2_COLLECTIONS', false),
       ('Можно ли удалить элемент, итерируясь по ArrayList? Какая исключительная ситуация может возникнуть?', '', 'CORE2_COLLECTIONS', false),
       ('Как ведет себя коллекция при использовании метода iterator.remove()?', '', 'CORE2_COLLECTIONS', false),
       ('Какие существуют реализации интерфейса Map в Java?', '', 'CORE2_COLLECTIONS', false),
       ('Как устроена HashMap, и какова сложность ее основных операций (до Java 8 и после)? Объясните принцип корзин.', '', 'CORE2_COLLECTIONS', true),
       ('Как устроена TreeMap, и какова сложность ее основных операций?', '', 'CORE2_COLLECTIONS', false),
       ('Как ведет себя HashMap, если пытаться добавить в нее два элемента с одинаковыми hashCode(), но с различающимися equals()?', '', 'CORE2_COLLECTIONS', true),
       ('Как поведет себя HashMap, если ключ, у которого определены некорректно equals и hashCode, будет добавлен?', '', 'CORE2_COLLECTIONS', true),
       ('Возможно ли, что HashMap превратится в список, даже если ключи имеют разные hashCode()?', '', 'CORE2_COLLECTIONS', true),
       ('Почему нельзя использовать byte[] в качестве ключа в HashMap?', '', 'CORE2_COLLECTIONS', true),
       ('Сможет ли работать HashMap, если все добавляемые ключи будут иметь одинаковый hashCode()?', '', 'CORE2_COLLECTIONS', true),
       ('Каково худшее время выполнения метода get(key) для ключа, отсутствующего в HashMap?', '', 'CORE2_COLLECTIONS', true),
       ('Каково худшее время выполнения метода get(key) для ключа, присутствующего в HashMap?', '', 'CORE2_COLLECTIONS', true),
       ('Что такое rehashing?', '', 'CORE2_COLLECTIONS', true),
       ('При каких условиях список в бакете перерождается в красно-черное дерево?', '', 'CORE2_COLLECTIONS', true),
       ('Как Set отличается от Map?', '', 'CORE2_COLLECTIONS', false),
       ('Как Set отличается от List?', '', 'CORE2_COLLECTIONS', false),
       ('Объясните интерфейс Set в Java.', '', 'CORE2_COLLECTIONS', false),
       ('Расскажите о реализациях интерфейса Set.', '', 'CORE2_COLLECTIONS', false),
       ('Каковы отличия между TreeSet и HashSet?', '', 'CORE2_COLLECTIONS', false),
       ('В чем разница между LinkedHashSet и HashSet?', '', 'CORE2_COLLECTIONS', false),
       ('Как изменится TreeSet, если добавлять элементы в него по возрастанию?', '', 'CORE2_COLLECTIONS', false),
       ('Как устроен HashSet, и какова сложность его основных операций? Объясните принцип корзин.', '', 'CORE2_COLLECTIONS', false),
       ('Как устроен LinkedHashSet, и какова сложность его основных операций?', '', 'CORE2_COLLECTIONS', false),
       ('Как устроен TreeSet, и какова сложность его основных операций?', '', 'CORE2_COLLECTIONS', false),
       ('Объясните интерфейс List в Java.', '', 'CORE2_COLLECTIONS', false),
       ('Как устроен ArrayList, и какова сложность его основных операций?', '', 'CORE2_COLLECTIONS', true),
       ('Что лучше использовать ArrayList или LinkedList?', '', 'CORE2_COLLECTIONS', true),
       ('Оцените объем памяти, необходимый для хранения одного примитива типа byte в LinkedList.', '', 'CORE2_COLLECTIONS', false),
       ('Оцените объем памяти, необходимый для хранения одного примитива типа byte в ArrayList.', '', 'CORE2_COLLECTIONS', false),
       ('Что такое Queue в Java?', '', 'CORE2_COLLECTIONS', false),
       ('Что представляет собой Deque, и в чем разница между Deque и Queue?', '', 'CORE2_COLLECTIONS', false),
       ('Приведите пример реализации Deque в Java.', '', 'CORE2_COLLECTIONS', false),
       ('Какую коллекцию можно использовать для реализации FIFO?', '', 'CORE2_COLLECTIONS', false),
       ('Какую коллекцию можно использовать для реализации LIFO?', '', 'CORE2_COLLECTIONS', false),
       ('Начальная емкость коллекций?', '', 'CORE2_COLLECTIONS', true),
       ('Что такое функциональный интерфейс, и как он используется в Java?', '', 'CORE2_COLLECTIONS', false),
       ('Для чего предназначена аннотация @FunctionalInterface?', '', 'CORE2_COLLECTIONS', false),
       ('Какие встроенные функциональные интерфейсы вы знаете?', '', 'CORE2_COLLECTIONS', false),
       ('Что такое ссылка на метод в контексте лямбда-выражений?', '', 'CORE2_COLLECTIONS', false),
       ('Что представляет собой лямбда-выражение, и чем его можно заменить?', '', 'CORE2_COLLECTIONS', false),
       ('Что такое Stream API, и для чего используются стримы?', '', 'CORE2_COLLECTIONS', false),
       ('Почему Stream называется ленивым?', '', 'CORE2_COLLECTIONS', false),
       ('Какие способы создания стрима вы знаете?', '', 'CORE2_COLLECTIONS', false),
       ('Как можно создать стрим из коллекции?', '', 'CORE2_COLLECTIONS', false),
       ('Какие промежуточные операции со стримами вы знаете?', '', 'CORE2_COLLECTIONS', true),
       ('В чем разница между методами map() и flatMap() в стримах?', '', 'CORE2_COLLECTIONS', false),
       ('Какие терминальные операции со стримами вы знаете?', '', 'CORE2_COLLECTIONS', true),
       ('Объясните метод collect() в контексте стримов.', '', 'CORE2_COLLECTIONS', false),
       ('Объясните метод reduce() в контексте стримов.', '', 'CORE2_COLLECTIONS', false),
       ('Расскажите о классе Collectors и его методах в контексте стримов.', '', 'CORE2_COLLECTIONS', false),
       ('Что такое параллельная обработка в Java 8?', '', 'CORE2_COLLECTIONS', false),
       ('Что представляют собой IntStream и DoubleStream?', '', 'CORE2_COLLECTIONS', false),
       ('Какие нововведения появились в Java 8?', '', 'CORE2_COLLECTIONS', false),
       ('Какие новые классы для работы с датами появились в Java 8?', '', 'CORE2_COLLECTIONS', false),
       ('Что представляет собой класс Optional в Java?', '', 'CORE2_COLLECTIONS', false),
       ('Какой класс появился в Java 8 для кодирования и декодирования данных?', '', 'CORE2_COLLECTIONS', false),
       ('Как создать кодировщик и декодировщик Base64 в Java?', '', 'CORE2_COLLECTIONS', false),
       ('Какие дополнительные методы для работы с ассоциативными массивами (maps) появились в Java 8?', '', 'CORE2_COLLECTIONS', false),
       ('Что такое LocalDateTime в контексте дат и времени?', '', 'CORE2_COLLECTIONS', false),
       ('Что представляет собой ZonedDateTime в контексте дат и времени?', '', 'CORE2_COLLECTIONS', false),
       ('Что такое Instant?', '', 'CORE2_COLLECTIONS', false),
       ('В чем отличие Instant от LocalDateTime?', '', 'CORE2_COLLECTIONS', false);
